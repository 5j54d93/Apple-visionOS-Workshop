#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Material "Material_Glass"
    {
        token outputs:mtlx:surface.connect = </Root/Material_Glass/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:metallic = 0.5
            float inputs:opacity = 0.2
            float inputs:roughness = 0.15
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 7
        }
    }

    def Material "Material_Wood"
    {
        token outputs:mtlx:surface.connect = </Root/Material_Wood/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (215.75, 104.5)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/Material_Wood/Mix.outputs:out>
            color3f inputs:emissiveColor
            float inputs:metallic
            float3 inputs:normal.connect = </Root/Material_Wood/NormalMapDecode.outputs:out>
            float inputs:opacity
            float inputs:roughness.connect = </Root/Material_Wood/Roughness.outputs:out>
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_image_vector3"
            asset inputs:file = @WoodTexture/Wood039_2K-JPG_NormalGL.jpg@
            string inputs:filtertype
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-365.9921, 410.44205)
            int ui:nodegraph:node:stackingOrder = 104
        }

        def Shader "NormalMapDecode"
        {
            uniform token info:id = "ND_normal_map_decode"
            float3 inputs:in.connect = </Root/Material_Wood/Normal.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-134.38911, 251.84125)
            int ui:nodegraph:node:stackingOrder = 102
        }

        def Shader "Roughness"
        {
            uniform token info:id = "ND_image_float"
            asset inputs:file = @WoodTexture/Wood039_2K-JPG_Roughness.jpg@
            string inputs:filtertype
            string inputs:uaddressmode
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-661.9678, 3.682353)
            int ui:nodegraph:node:stackingOrder = 117
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg = (0, 0, 0) (
                colorSpace = "lin_srgb"
            )
            color3f inputs:bg.connect = None
            color3f inputs:fg = (0.6679979, 0.47512126, 0.2586011) (
                colorSpace = "srgb_texture"
            )
            color3f inputs:fg.connect = None
            float inputs:mix.connect = </Root/Material_Wood/Color.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-122.158676, -37.84455)
            int ui:nodegraph:node:stackingOrder = 127
        }

        def Shader "Color"
        {
            uniform token info:id = "ND_image_float"
            asset inputs:file = @WoodTexture/Wood039_2K-JPG_Color.jpg@
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float outputs:out
            float2 ui:nodegraph:node:pos = (-369.1177, -193.61797)
            int ui:nodegraph:node:stackingOrder = 126
        }
    }

    def Material "Material_Snow"
    {
        token outputs:mtlx:surface.connect = </Root/Material_Snow/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (215.75, 104.5)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/Material_Snow/Mix.outputs:out>
            float inputs:roughness = 0.5
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 22
        }

        def Shader "Fractal3D"
        {
            uniform token info:id = "ND_fractal3d_float"
            float inputs:amplitude = 0.5
            float inputs:diminish = 1
            float inputs:lacunarity = 2
            int inputs:octaves = 20
            float3 inputs:position
            float outputs:out
            float2 ui:nodegraph:node:pos = (-338.42578, 54.976562)
            int ui:nodegraph:node:stackingOrder = 24
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg = (0.59297395, 0.81747925, 0.9698383) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:fg = (0.999996, 1, 1) (
                colorSpace = "srgb_texture"
            )
            prepend float inputs:mix.connect = </Root/Material_Snow/Fractal3D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-146.77734, 0.5078125)
            int ui:nodegraph:node:stackingOrder = 14
        }
    }

    def "Maple_Plywood" (
        active = true
        references = @MaplePlywood.usdz@
    )
    {
        color3f inputs:Basecolor_Tint = (0.6679979, 0.47512126, 0.2586011) (
            colorSpace = "srgb_texture"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "BaseColor"
        {
            int ui:nodegraph:node:stackingOrder = 2329
        }
    }
}

